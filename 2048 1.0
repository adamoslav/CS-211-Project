//
//  main.cpp
//  2048 game
//
//  Created by Adam Balatka on 11/27/23.
//

#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <ctime>
#include <curses.h>
#include <unistd.h>
using namespace std;

int board [4][4] = {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}};

void initializeBoardToZeros(int board[4][4]){
    for (int i = 0; i < 4; i++){
        for (int j = 0; j < 4; j++)
            board[i][j] = 0;
    }
}

void generateRandomNumberOnTheBoard(int board [4][4]){
    srand(static_cast<unsigned int>(time(nullptr)));
    int randomNumber = rand() % 10 ;
    int placedNumber = (randomNumber == 0) ? 4 : 2;
    int row = rand() % 4;
    int column = rand() % 4;
    while (board[row][column] != 0){
        row = rand() % 4;
        column = rand() % 4;
    }
    board[row][column] = placedNumber;
    
}


void drawBoard(int board[4][4]) {
    cout << "\033[H";
    cout << "Commands are w = up, s = down, a = left, d = right, q = quit, n = new game" << endl;
    generateRandomNumberOnTheBoard(board);
    generateRandomNumberOnTheBoard(board);
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            cout << setw(1) << board[i][j] << " | " << setw(4);
        }
        cout << endl;
        cout << "---------------\n";
    }
    cout << "Move:";

}

void mergeNumbers(int &current, int &neighbor) {
    current *= 2;
    neighbor = 0;
}

void moveUp(int board[4][4]) {
    for (int col = 0; col < 4; col++) {
        for (int row = 0; row < 3; row++) {
            if (board[row][col] != 0) {
                int currentRow = row;
                while (currentRow < 3 && board[currentRow + 1][col] == 0) {
                    currentRow++;
                }
                if (currentRow < 3 && board[currentRow + 1][col] == board[row][col]) {
                    mergeNumbers(board[row][col], board[currentRow + 1][col]);
                }
            }
        }
    }

    for (int col = 0; col < 4; col++) {
        for (int row = 1; row < 4; row++) {
            if (board[row][col] != 0) {
                int currentRow = row;
                while (currentRow > 0 && board[currentRow - 1][col] == 0) {
                    swap(board[currentRow][col], board[currentRow - 1][col]);
                    currentRow--;
                }
            }
        }
    }
}

void moveDown(int board[4][4]) {
    for (int col = 0; col < 4; col++) {
        for (int row = 3; row > 0; row--) {
            if (board[row][col] != 0) {
                int currentRow = row;
                while (currentRow > 0 && board[currentRow - 1][col] == 0) {
                    currentRow--;
                }
                if (currentRow > 0 && board[currentRow - 1][col] == board[row][col]) {
                    mergeNumbers(board[row][col], board[currentRow - 1][col]);
                }
            }
        }
    }

    for (int col = 0; col < 4; col++) {
        for (int row = 2; row >= 0; row--) {
            if (board[row][col] != 0) {
                int currentRow = row;
                while (currentRow < 3 && board[currentRow + 1][col] == 0) {
                    swap(board[currentRow][col], board[currentRow + 1][col]);
                    currentRow++;
                }
            }
        }
    }
}

void moveLeft(int board[4][4]) {
    for (int row = 0; row < 4; row++) {
        for (int col = 0; col < 3; col++) {
            if (board[row][col] != 0) {
                int currentCol = col;
                while (currentCol < 3 && board[row][currentCol + 1] == 0) {
                    currentCol++;
                }
                if (currentCol < 3 && board[row][currentCol + 1] == board[row][col]) {
                    mergeNumbers(board[row][col], board[row][currentCol + 1]);
                }
            }
        }
    }

    for (int row = 0; row < 4; row++) {
        for (int col = 1; col < 4; col++) {
            if (board[row][col] != 0) {
                int currentCol = col;
                while (currentCol > 0 && board[row][currentCol - 1] == 0) {
                    swap(board[row][currentCol], board[row][currentCol - 1]);
                    currentCol--;
                }
            }
        }
    }
}

void moveRight(int board[4][4]) {
    for (int row = 0; row < 4; row++) {
        for (int col = 3; col > 0; col--) {
            if (board[row][col] != 0) {
                int currentCol = col;
                while (currentCol > 0 && board[row][currentCol - 1] == 0) {
                    currentCol--;
                }
                if (currentCol > 0 && board[row][currentCol - 1] == board[row][col]) {
                    mergeNumbers(board[row][col], board[row][currentCol - 1]);
                }
            }
        }
    }

    for (int row = 0; row < 4; row++) {
        for (int col = 2; col >= 0; col--) {
            if (board[row][col] != 0) {
                int currentCol = col;
                while (currentCol < 3 && board[row][currentCol + 1] == 0) {
                    swap(board[row][currentCol], board[row][currentCol + 1]);
                    currentCol++;
                }
            }
        }
    }
}


void game(int board[4][4]){
    char move;
    initializeBoardToZeros(board);
    drawBoard(board);
    while (true){
        cin >> move;
        switch (move){
            case 'w':
                moveUp(board);
                break;
            case 's':
                moveDown(board);
                break;
            case 'a':
                moveLeft(board);
                break;
            case 'd':
                moveRight(board);
                break;
            case 'q':
                cout << "Thank you for playing.";
                exit(0);
            case 'n':
                initializeBoardToZeros(board);
                break;
            default:
                cout << "Invalid input. Please use w/a/s/d keys.";
            }
        drawBoard(board);

    }
}
    
    
int main() {
    game(board);
    return 0;
}

